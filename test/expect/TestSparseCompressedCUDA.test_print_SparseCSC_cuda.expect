########## torch.float32/torch.int32/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0, 2, 4]),
       row_indices=tensor([0, 1, 0, 1]),
       values=tensor([1., 2., 3., 4.]), device='cuda:0', size=(2, 2), nnz=4,
       layout=torch.sparse_csc)
# _ccol_indices
tensor([0, 2, 4], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([0, 1, 0, 1], device='cuda:0', dtype=torch.int32)
# _values
tensor([1., 2., 3., 4.], device='cuda:0')

########## torch.float32/torch.int32/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0]),
       row_indices=tensor([], size=(0,)),
       values=tensor([], size=(0,)), device='cuda:0', size=(0, 0), nnz=0,
       layout=torch.sparse_csc)
# _ccol_indices
tensor([0], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([], device='cuda:0', dtype=torch.int32)
# _values
tensor([], device='cuda:0')

########## torch.float32/torch.int32/batch_shape=(2,)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[0, 2, 4],
                            [0, 2, 4]]),
       row_indices=tensor([[0, 1, 0, 1],
                           [0, 1, 0, 1]]),
       values=tensor([[1., 2., 3., 4.],
                      [1., 2., 3., 4.]]), device='cuda:0', size=(2, 2, 2),
       nnz=4, layout=torch.sparse_csc)
# _ccol_indices
tensor([[0, 2, 4],
        [0, 2, 4]], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([[0, 1, 0, 1],
        [0, 1, 0, 1]], device='cuda:0', dtype=torch.int32)
# _values
tensor([[1., 2., 3., 4.],
        [1., 2., 3., 4.]], device='cuda:0')

########## torch.float32/torch.int32/batch_shape=(2, 3)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]],

                            [[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]]]),
       row_indices=tensor([[[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]],

                           [[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]]]),
       values=tensor([[[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]]]), device='cuda:0', size=(2, 3, 2, 2),
       nnz=4, layout=torch.sparse_csc)
# _ccol_indices
tensor([[[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]],

        [[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]]], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([[[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]],

        [[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]]], device='cuda:0', dtype=torch.int32)
# _values
tensor([[[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]],

        [[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]]], device='cuda:0')


########## torch.float64/torch.int32/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0, 2, 4]),
       row_indices=tensor([0, 1, 0, 1]),
       values=tensor([1., 2., 3., 4.]), device='cuda:0', size=(2, 2), nnz=4,
       dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([0, 2, 4], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([0, 1, 0, 1], device='cuda:0', dtype=torch.int32)
# _values
tensor([1., 2., 3., 4.], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int32/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0]),
       row_indices=tensor([], size=(0,)),
       values=tensor([], size=(0,)), device='cuda:0', size=(0, 0), nnz=0,
       dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([0], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([], device='cuda:0', dtype=torch.int32)
# _values
tensor([], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int32/batch_shape=(2,)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[0, 2, 4],
                            [0, 2, 4]]),
       row_indices=tensor([[0, 1, 0, 1],
                           [0, 1, 0, 1]]),
       values=tensor([[1., 2., 3., 4.],
                      [1., 2., 3., 4.]]), device='cuda:0', size=(2, 2, 2),
       nnz=4, dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([[0, 2, 4],
        [0, 2, 4]], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([[0, 1, 0, 1],
        [0, 1, 0, 1]], device='cuda:0', dtype=torch.int32)
# _values
tensor([[1., 2., 3., 4.],
        [1., 2., 3., 4.]], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int32/batch_shape=(2, 3)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]],

                            [[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]]]),
       row_indices=tensor([[[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]],

                           [[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]]]),
       values=tensor([[[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]]]), device='cuda:0', size=(2, 3, 2, 2),
       nnz=4, dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([[[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]],

        [[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]]], device='cuda:0', dtype=torch.int32)
# _row_indices
tensor([[[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]],

        [[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]]], device='cuda:0', dtype=torch.int32)
# _values
tensor([[[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]],

        [[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]]], device='cuda:0', dtype=torch.float64)


########## torch.float32/torch.int64/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0, 2, 4]),
       row_indices=tensor([0, 1, 0, 1]),
       values=tensor([1., 2., 3., 4.]), device='cuda:0', size=(2, 2), nnz=4,
       layout=torch.sparse_csc)
# _ccol_indices
tensor([0, 2, 4], device='cuda:0')
# _row_indices
tensor([0, 1, 0, 1], device='cuda:0')
# _values
tensor([1., 2., 3., 4.], device='cuda:0')

########## torch.float32/torch.int64/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0]),
       row_indices=tensor([], size=(0,)),
       values=tensor([], size=(0,)), device='cuda:0', size=(0, 0), nnz=0,
       layout=torch.sparse_csc)
# _ccol_indices
tensor([0], device='cuda:0')
# _row_indices
tensor([], device='cuda:0', dtype=torch.int64)
# _values
tensor([], device='cuda:0')

########## torch.float32/torch.int64/batch_shape=(2,)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[0, 2, 4],
                            [0, 2, 4]]),
       row_indices=tensor([[0, 1, 0, 1],
                           [0, 1, 0, 1]]),
       values=tensor([[1., 2., 3., 4.],
                      [1., 2., 3., 4.]]), device='cuda:0', size=(2, 2, 2),
       nnz=4, layout=torch.sparse_csc)
# _ccol_indices
tensor([[0, 2, 4],
        [0, 2, 4]], device='cuda:0')
# _row_indices
tensor([[0, 1, 0, 1],
        [0, 1, 0, 1]], device='cuda:0')
# _values
tensor([[1., 2., 3., 4.],
        [1., 2., 3., 4.]], device='cuda:0')

########## torch.float32/torch.int64/batch_shape=(2, 3)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]],

                            [[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]]]),
       row_indices=tensor([[[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]],

                           [[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]]]),
       values=tensor([[[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]]]), device='cuda:0', size=(2, 3, 2, 2),
       nnz=4, layout=torch.sparse_csc)
# _ccol_indices
tensor([[[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]],

        [[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]]], device='cuda:0')
# _row_indices
tensor([[[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]],

        [[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]]], device='cuda:0')
# _values
tensor([[[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]],

        [[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]]], device='cuda:0')


########## torch.float64/torch.int64/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0, 2, 4]),
       row_indices=tensor([0, 1, 0, 1]),
       values=tensor([1., 2., 3., 4.]), device='cuda:0', size=(2, 2), nnz=4,
       dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([0, 2, 4], device='cuda:0')
# _row_indices
tensor([0, 1, 0, 1], device='cuda:0')
# _values
tensor([1., 2., 3., 4.], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int64/batch_shape=()/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([0]),
       row_indices=tensor([], size=(0,)),
       values=tensor([], size=(0,)), device='cuda:0', size=(0, 0), nnz=0,
       dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([0], device='cuda:0')
# _row_indices
tensor([], device='cuda:0', dtype=torch.int64)
# _values
tensor([], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int64/batch_shape=(2,)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[0, 2, 4],
                            [0, 2, 4]]),
       row_indices=tensor([[0, 1, 0, 1],
                           [0, 1, 0, 1]]),
       values=tensor([[1., 2., 3., 4.],
                      [1., 2., 3., 4.]]), device='cuda:0', size=(2, 2, 2),
       nnz=4, dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([[0, 2, 4],
        [0, 2, 4]], device='cuda:0')
# _row_indices
tensor([[0, 1, 0, 1],
        [0, 1, 0, 1]], device='cuda:0')
# _values
tensor([[1., 2., 3., 4.],
        [1., 2., 3., 4.]], device='cuda:0', dtype=torch.float64)

########## torch.float64/torch.int64/batch_shape=(2, 3)/block_shape=() ##########
# sparse tensor
tensor(ccol_indices=tensor([[[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]],

                            [[0, 2, 4],
                             [0, 2, 4],
                             [0, 2, 4]]]),
       row_indices=tensor([[[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]],

                           [[0, 1, 0, 1],
                            [0, 1, 0, 1],
                            [0, 1, 0, 1]]]),
       values=tensor([[[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]]]), device='cuda:0', size=(2, 3, 2, 2),
       nnz=4, dtype=torch.float64, layout=torch.sparse_csc)
# _ccol_indices
tensor([[[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]],

        [[0, 2, 4],
         [0, 2, 4],
         [0, 2, 4]]], device='cuda:0')
# _row_indices
tensor([[[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]],

        [[0, 1, 0, 1],
         [0, 1, 0, 1],
         [0, 1, 0, 1]]], device='cuda:0')
# _values
tensor([[[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]],

        [[1., 2., 3., 4.],
         [1., 2., 3., 4.],
         [1., 2., 3., 4.]]], device='cuda:0', dtype=torch.float64)


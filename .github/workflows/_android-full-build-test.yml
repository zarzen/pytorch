name: android-full-build-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
        description: Top-level label for what's being built/tested.
      docker-image-name:
        required: true
        type: string
        description: Name of the base docker image to build with.

    secrets:
      SONATYPE_NEXUS_USERNAME:
        description: nexus user
        required: true
      SONATYPE_NEXUS_PASSWORD:
        description: nexus pass
        required: true
      ANDROID_SIGN_KEY:
        description: android key
        required: true
      ANDROID_SIGN_PASS:
        description: android pass
        required: true
      SCRIBE_GRAPHQL_ACCESS_TOKEN:
        description: token for writing to scribe/scuba
        required: true

env:
  IN_CI: 1 # TODO delete in favor of GITHUB_ACTIONS
  IS_GHA: 1 # TODO delete in favor of GITHUB_ACTIONS
  GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

jobs:
  build:
    # Don't run on forked repos.
    if: github.repository_owner == 'pytorch'
    runs-on: [self-hosted, linux.2xlarge]
    steps:
      # [see note: pytorch repo ref]
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@master

      - name: Setup Linux
        uses: ./.github/actions/setup-linux

      - name: Setup SSH (Click me for login details)
        uses: ./.github/actions/setup-ssh
        with:
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate docker image
        id: calculate-docker-image
        uses: ./.github/actions/calculate-docker-image
        with:
          docker-image-name: ${{ inputs.docker-image-name }}

      - name: Pull docker image
        uses: ./.github/actions/pull-docker-image
        with:
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}

      - name: Output disk space left
        shell: bash
        run: |
          sudo df -H

      - name: Preserve github env variables for use in docker
        shell: bash
        run: |
          env | grep '^GITHUB' > "/tmp/github_env_${GITHUB_RUN_ID}"

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Build arm-v7a
        uses: ./.github/actions/build-android
        with:
          arch: arm_v7a
          arch-for-build-env: arm-v7a
          github-secret: ${{ secrets.GITHUB_TOKEN }}
          build-environment: ${{ inputs.build-environment }}
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}
          branch: ${{ steps.parse-ref.outputs.branch }}

      - name: Build arm-v8a
        uses: ./.github/actions/build-android
        with:
          arch: arm_v8a
          arch-for-build-env: arm-v8a
          github-secret: ${{ secrets.GITHUB_TOKEN }}
          build-environment: ${{ inputs.build-environment }}
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}
          branch: ${{ steps.parse-ref.outputs.branch }}

      - name: Build x86_32
        id: build-x86_32
        uses: ./.github/actions/build-android
        with:
          arch: x86_32
          arch-for-build-env: x86_32
          github-secret: ${{ secrets.GITHUB_TOKEN }}
          build-environment: ${{ inputs.build-environment }}
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}
          branch: ${{ steps.parse-ref.outputs.branch }}

      - name: Build x86_64
        uses: ./.github/actions/build-android
        with:
          arch: x86_64
          arch-for-build-env: x86_64
          github-secret: ${{ secrets.GITHUB_TOKEN }}
          build-environment: ${{ inputs.build-environment }}
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}
          branch: ${{ steps.parse-ref.outputs.branch }}

      - name: Build final artifact
        env:
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          DOCKER_IMAGE: ${{ steps.calculate-docker-image.outputs.docker-image }}
          AWS_DEFAULT_REGION: us-east-1
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
          SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
          ID_X86_32: ${{ steps.build-x86_32.outputs.container_id }}
        run: |
          set -eux

          # Putting everything together
          # ID_X86_32 container were created during build-x86_32 step
          docker cp "${GITHUB_WORKSPACE}/build_android_install_arm_v7a" "${ID_X86_32}:/var/lib/jenkins/workspace/build_android_install_arm_v7a"
          docker cp "${GITHUB_WORKSPACE}/build_android_install_x86_64" "${ID_X86_32}:/var/lib/jenkins/workspace/build_android_install_x86_64"
          docker cp "${GITHUB_WORKSPACE}/build_android_install_arm_v8a" "${ID_X86_32}:/var/lib/jenkins/workspace/build_android_install_arm_v8a"
          docker cp "${GITHUB_WORKSPACE}/build_android_install_x86_32" "${ID_X86_32}:/var/lib/jenkins/workspace/build_android_install_x86_32"

          # run gradle buildRelease
          (echo "./.circleci/scripts/build_android_gradle.sh" | docker exec \
            -e BUILD_ENVIRONMENT="pytorch-linux-xenial-py3-clang5-android-ndk-r19c-gradle-build" \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e AWS_DEFAULT_REGION \
            -e IS_GHA \
            -e PR_NUMBER \
            -e SHA1 \
            -e BRANCH \
            -e GITHUB_RUN_ID \
            -e SCCACHE_BUCKET \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --user jenkins \
            -u jenkins -i "${ID_X86_32}" bash) 2>&1

          mkdir -p "${GITHUB_WORKSPACE}/build_android_artifacts"
          docker cp "${ID_X86_32}:/var/lib/jenkins/workspace/android/artifacts.tgz" "${GITHUB_WORKSPACE}/build_android_artifacts/"

      - name: Display and upload binary build size statistics (Click Me)
        # temporary hack: set CIRCLE_* vars, until we update
        # tools/stats/print_test_stats.py to natively support GitHub Actions
        env:
          AWS_DEFAULT_REGION: us-east-1
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: ${{ github.run_id }}
          ANDROID_BUILD_TYPE: prebuilt
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
        run: |
          # The artifact file is created inside docker container, which contains the result binaries.
          # Now unpackage it into the project folder. The subsequent script will scan project folder
          # to locate result binaries and report their sizes.
          # If artifact file is not provided it assumes that the project folder has been mounted in
          # the docker during build and already contains the result binaries, so this step can be skipped.
          export ARTIFACTS=${GITHUB_WORKSPACE}/build_android_artifacts/artifacts.tgz
          if [ -n "${ARTIFACTS}" ]; then
            tar xf "${ARTIFACTS}" -C "${GITHUB_WORKSPACE}"
            cd "${GITHUB_WORKSPACE}"
          fi
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          pip3 install requests==2.26 boto3==1.16.34
          python3 -m tools.stats.upload_binary_size_to_scuba "android" || exit 0

      - name: Publish android snapshot
        if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/nightly' }}
        env:
          SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ANDROID_SIGN_KEY: ${{ secrets.ANDROID_SIGN_KEY }}
          ANDROID_SIGN_PASS: ${{ secrets.ANDROID_SIGN_PASS }}
          ID_X86_32: ${{ steps.build-x86_32.outputs.container_id }}
        run: |
          set -eux
          (echo "./.circleci/scripts/publish_android_snapshot.sh" | docker exec \
            -e BUILD_ENVIRONMENT="pytorch-linux-xenial-py3-clang5-android-ndk-r19c-gradle-publish-snapshot" \
            -e SONATYPE_NEXUS_USERNAME \
            -e SONATYPE_NEXUS_PASSWORD \
            -e ANDROID_SIGN_KEY \
            -e ANDROID_SIGN_PASS \
            -e http_proxy="http://internal-tf-lb-20210727220640487900000002-835786077.us-east-1.elb.amazonaws.com:3128" -e https_proxy="http://internal-tf-lb-20210727220640487900000002-835786077.us-east-1.elb.amazonaws.com:3128" -e no_proxy="localhost,127.0.0.1,github.com,amazonaws.com,s3.amazonaws.com,169.254.169.254,169.254.170.2,/var/run/docker.sock" \
            -u jenkins -i "${ID_X86_32}" bash) 2>&1

      - name: Store PyTorch Android Build Artifacts on S3
        uses: seemethere/upload-artifact-s3@v4
        with:
          name: ${{ inputs.build-environment }}
          retention-days: 14
          if-no-files-found: error
          path: build_android_artifacts/artifacts.tgz

      - name: Chown workspace
        uses: ./.github/actions/chown-workspace
        if: always()

      - name: Teardown Linux
        uses: ./.github/actions/teardown-linux
        if: always()

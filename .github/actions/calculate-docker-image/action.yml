name: Calculate docker image

description: Determine docker image to pull, building a new one if necessary.

inputs:
  docker-image-name:
    description: The name of a docker image, like `pytorch-linux-xenial-py3.7-gcc7`
    required: true
  xla:
    description: |
      Whether or not to use a pre-build XLA docker image.
      Note that this is a string, either "true" or "false" due to GHA limitations.
    required: false
  always-rebuild:
    description: If set to any value, always build a fresh docker image.
    required: false
  pull:
    description: If set to any value, run `docker pull`` on the calculated image.
    required: false

outputs:
  docker-image:
    description: The docker image to use for the rest of the workflow
    value: ${{ steps.calculate-tag.outputs.docker-image }}

runs:
  using: composite
  steps:
    - name: Calculate docker image tag
      shell: bash
      id: calculate-tag
      env:
        IS_XLA: ${{ inputs.xla == 'true' && 'true' || '' }}
        XLA_IMAGE_TAG: v0.2
        DOCKER_IMAGE_BASE: 308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/${{ inputs.docker-image-name }}
      run: |
        if [ -n "${IS_XLA}" ]; then
          echo "XLA workflow uses pre-built test image at ${XLA_IMAGE_TAG}"
          DOCKER_TAG=$(git rev-parse HEAD:.circleci/docker)
          echo "::set-output name=docker-tag::${DOCKER_TAG}"
          echo "::set-output name=docker-image::${DOCKER_IMAGE_BASE}:${XLA_IMAGE_TAG}"
        else
          DOCKER_TAG=$(git rev-parse HEAD:.circleci/docker)
          echo "::set-output name=docker-tag::${DOCKER_TAG}"
          echo "::set-output name=docker-image::${DOCKER_IMAGE_BASE}:${DOCKER_TAG}"
        fi

    - name: Check if image should be built
      shell: bash
      id: check
      if: ${{ !inputs.always-rebuild }}
      env:
        BASE_REVISION: ${{ github.event.pull_request.base.sha || github.sha }}
        DOCKER_IMAGE: ${{ steps.calculate-tag.outputs.docker-image }}
        DOCKER_TAG: ${{ steps.calculate-tag.outputs.docker-tag }}
      run: |
        set -x
        # Check if image already exists, if it does then skip building it
        if docker manifest inspect "${DOCKER_IMAGE}"; then
          exit 0
        fi
        if [[ "$BASE_REVISION" = "$(git rev-parse HEAD)" ]]; then
          # if we're on the base branch then use the parent commit
          MERGE_BASE=$(git rev-parse HEAD~)
        else
          # otherwise we're on a PR, so use the most recent base commit
          MERGE_BASE=$(git merge-base HEAD "$BASE_REVISION")
        fi
        # Covers the case where a previous tag doesn't exist for the tree
        # this is only really applicable on trees that don't have `.circleci/docker` at its merge base, i.e. nightly
        if ! git rev-parse "$MERGE_BASE:.circleci/docker"; then
          echo "Directory '.circleci/docker' not found in commit $MERGE_BASE, you should probably rebase onto a more recent commit"
          exit 1
        fi
        PREVIOUS_DOCKER_TAG=$(git rev-parse "$MERGE_BASE:.circleci/docker")
        # If no image exists but the hash is the same as the previous hash then we should error out here
        if [[ "${PREVIOUS_DOCKER_TAG}" = "${DOCKER_TAG}" ]]; then
          echo "ERROR: Something has gone wrong and the previous image isn't available for the merge-base of your branch"
          echo "       contact the PyTorch team to restore the original images"
          exit 1
        fi
        echo ::set-output name=rebuild::yes

    - name: Build and push docker image
      if: inputs.always-rebuild || steps.check.outputs.rebuild
      env:
        IMAGE_NAME: ${{inputs.docker-image-name}}
        DOCKER_SKIP_S3_UPLOAD: "1"
        DOCKER_TAG: ${{ steps.calculate-tag.outputs.docker-tag }}
      working-directory: .circleci/docker
      shell: bash
      run: |
        ./build_docker.sh

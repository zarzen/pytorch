{% import 'common.yml.j2' as common %}

{%- macro upload_androind_binary_size(build_type, artifacts) -%}
      - name: Display and upload binary build size statistics (Click Me)
        # temporary hack: set CIRCLE_* vars, until we update
        # tools/stats/print_test_stats.py to natively support GitHub Actions
        env:
          AWS_DEFAULT_REGION: us-east-1
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: '${{ github.run_id }}'
        run: |
          # The artifact file is created inside docker container, which contains the result binaries.
          # Now unpackage it into the project folder. The subsequent script will scan project folder
          # to locate result binaries and report their sizes.
          # If artifact file is not provided it assumes that the project folder has been mounted in
          # the docker during build and already contains the result binaries, so this step can be skipped.
          export ARTIFACTS=!{{ artifacts }}
          if [ -n "${ARTIFACTS}" ]; then
            tar xf "${ARTIFACTS}" -C "${GITHUB_WORKSPACE}"
            cd "${GITHUB_WORKSPACE}"
          fi
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          ANDROID_BUILD_TYPE=!{{ build_type}}
          export ANDROID_BUILD_TYPE
          pip3 install requests==2.26 boto3==1.16.34
          python3 -m tools.stats.upload_binary_size_to_scuba "android" || exit 0
{%- endmacro -%}

{%- macro build_android(env_name, container_suffix) -%}
      - name: Build-!{{ container_suffix }}
        env:
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
        run: |
          # detached container should get cleaned up by teardown_ec2_linux
          #!/bin/bash -eo pipefail
          # Pull Docker image and run build
          time docker pull "${DOCKER_IMAGE}" >/dev/null
          echo "${DOCKER_IMAGE}"
          export container_name
          container_name=$(docker run \
            -e BUILD_ENVIRONMENT=!{{ env_name }} \
            -e JOB_BASE_NAME \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e AWS_DEFAULT_REGION \
            -e IS_GHA \
            -e PR_NUMBER \
            -e SHA1 \
            -e BRANCH \
            -e GITHUB_RUN_ID \
            -e SCCACHE_BUCKET \
            -e XLA_CLANG_CACHE_S3_BUCKET_NAME \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            -e TORCH_CUDA_ARCH_LIST \
            -e PR_LABELS \
            -e http_proxy="!{{ common.squid_proxy }}" -e https_proxy="!{{ common.squid_proxy }}" -e no_proxy="!{{ common.squid_no_proxy }}" \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --detach \
            --user jenkins \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )
          git submodule sync && git submodule update -q --init --recursive --depth 1 --jobs 0
          docker cp "${GITHUB_WORKSPACE}/." "${container_name}:/var/lib/jenkins/workspace"
          # shellcheck disable=SC1105
          ((echo "sudo chown -R jenkins . && .jenkins/pytorch/build.sh && find ${BUILD_ROOT} -type f -name "*.a" -or -name "*.o" -delete") | docker exec -u jenkins -i "${container_name}" bash) 2>&1

          # Copy dist folder back
          export COMMIT_DOCKER_IMAGE=${DOCKER_IMAGE}-!{{ container_suffix }}
          docker cp "${container_name}:/var/lib/jenkins/workspace/dist" "${GITHUB_WORKSPACE}/." || echo "Dist folder not found"
          docker commit "${container_name}" "${COMMIT_DOCKER_IMAGE}"
          time docker push "${COMMIT_DOCKER_IMAGE}"
{%- endmacro -%}
